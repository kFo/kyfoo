ExitProcess(uExitCode : u32) -> ()

GetStdHandle(nStdHandle : HANDLE) -> HANDLE
WriteFile(
/*_In_       */ hFile                  : HANDLE       ,
/*_In_       */ lpBuffer               : LPCVOID      ,
/*_In_       */ nNumberOfBytesToWrite  : DWORD        ,
/*_Out_opt_  */ lpNumberOfBytesWritten : LPDWORD      ,
/*_Inout_opt_*/ lpOverlapped           : LPOVERLAPPED
 ) -> BOOL
ReadFile(
/*_In_        */ hFile                : HANDLE       ,
/*_Out_       */ lpBuffer             : LPVOID       ,
/*_In_        */ nNumberOfBytesToRead : DWORD        ,
/*_Out_opt_   */ lpNumberOfBytesRead  : LPDWORD      ,
/*_Inout_opt_ */ lpOverlapped         : LPOVERLAPPED 
 ) -> BOOL

GetProcessHeap() -> HANDLE
HeapAlloc(
/*_In_*/ hHeap   : HANDLE ,
/*_In_*/ dwFlags : DWORD  ,
/*_In_*/ dwBytes : SIZE_T
 ) -> LPVOID
HeapFree(
/*_In_*/ hHeap   : HANDLE ,
/*_In_*/ dwFlags : DWORD  ,
/*_In_*/ lpMem   : LPVOID 
 ) -> BOOL

HANDLE       := u32
LPVOID       := ptr u8
LPCVOID      := ptr u8
DWORD        := u32
LPDWORD      := ptr u32
LPOVERLAPPED := ptr<()>
BOOL         := u32
SIZE_T       := ULONG_PTR
ULONG_PTR    := uz

STD_INPUT_HANDLE  := u32 4294967286 // -10
STD_OUTPUT_HANDLE := u32 4294967285 // -11
STD_ERROR_HANDLE  := u32 4294967284 // -12

HEAP_GENERATE_EXCEPTIONS := 4 // 0x00000004
HEAP_NO_SERIALIZE        := 1 // 0x00000001
HEAP_ZERO_MEMORY         := 8 // 0x00000008

NULL := null

not(x : u1) -> u1 =>
    :. eq x 0

put(c : u8) -> () =>
    := a : u8 = c
    WriteFile (GetStdHandle STD_OUTPUT_HANDLE) (addr a) 1 NULL NULL
    :. 42

pow<\T>(base : T, exp : u32) -> T =>
    := ret : T = 1
    := i : u32 = exp
    :* ne i 0
        ret = mul ret base
        i = sub i 1
    :. ret

put(num : u32) -> () =>
    := digits : ascii = "0123456789"
    := buffer : u8..10
    := n : u32 = num
    := i : uz = 0
    :* ge n 10
        buffer i = digits (rem n 10)
        n = div n 10
        i = add i 1

    buffer i = digits n
    :* ne i -1
        put(buffer i)
        i = sub i 1
    :.

put(s : ascii) -> () =>
    WriteFile(GetStdHandle STD_OUTPUT_HANDLE, s.base, trunc<u32> s.card, NULL, NULL)
    :.

putLine() -> () =>
    put("\n")
    :.

swap(a b : ref \T) -> () =>
    // todo: tuple syntax
    := tmp : T = a
    a = b
    b = tmp
    :.

bubble(arr : ref slice<\T>, c : (T, T)->u1) -> u32 =>
    := ret : u32 = 0
    := i : uz = 0
    :* lt(i, sub arr.card 1)
        :<> not(c(arr i, arr (add i 1)))
            swap(arr i, arr (add i 1))
            ret = add ret 1
        i = add i 1
    
    :. ret

bubbleSort(arr : ref slice<\T>, c : (T, T)->u1) -> () =>
    :* (bubble arr c).ne 0
    :.

bubbleSort(arr : ref slice<\T>) -> () =>
    :. bubbleSort arr (x y:T)->u1=>:.lt x y

@"WriteWrapper"
WriteWrapper(str : ascii) -> () =>
    := written : u32 = 0
    WriteFile(GetStdHandle STD_OUTPUT_HANDLE, str.base, trunc<u32> str.card, addr written, NULL)
    WriteFile (GetStdHandle STD_OUTPUT_HANDLE) str.base (trunc<u32> str.card) (addr written) NULL
    :.

ftest (x y : s32) -> s32 =>
    WriteWrapper("hello world!\n")
    :? add (add x y) y
        WriteWrapper("branch 1\n")
        :. 42
    :/ add x y
        WriteWrapper("branch 2\n")
        :. 99
    :/
        WriteWrapper("branch 3\n")
    
    WriteWrapper("end\n")
    :. 55

gtest(n : s32) -> () =>
    := p : LPVOID = HeapAlloc GetProcessHeap 0 512
    := bytes : DWORD = 0
    := arr : u8..256
    ReadFile GetStdHandle-STD_INPUT_HANDLE arr-bytes.addr 256 bytes.addr NULL
    WriteFile GetStdHandle-STD_OUTPUT_HANDLE arr.0.addr bytes NULL NULL
    :<outer>
        := i : s32 = 0
        :* lt i n
            WriteWrapper "wut\n"
            i = add i 1
        
        WriteWrapper("rawr")
    
    arr (c : ref u8) -> () => :. WriteFile GetStdHandle-STD_OUTPUT_HANDLE c.addr 1 NULL NULL
    
    HeapFree GetProcessHeap 0 p
    :.

mkArray<u32>(n : uz) -> slice u32 =>
    := ret : slice u32
    ret.ctor HeapAlloc(GetProcessHeap, 0, n.mul(4)).cast<ptr u32> n
    :. ret

delete(s:slice \T) -> () =>
    HeapFree GetProcessHeap 0 cast<LPVOID>(s.base)
    :.

htest() -> () =>
    //:= arr : u32..6 = [1, 2, 3, 4, 5, 6]
    //:= arr : u32..6
    := arr : slice u32 = mkArray<u32> 6
    := i : u32 = 0
    :* ne i 6
        arr i = sub 6 i
        i = add i 1
    
    arr (c : ref u32) -> () => :. put(c)
    putLine
    put "card: "
    put arr.card.trunc<u32>
    putLine
    put 23.u32
    put " "
    put pow<u32>(2 3)
    put " "
    put -1.u32
    putLine
    bubbleSort arr
    arr (c : ref u32) -> () => :. put c
    
    arr.delete
    :.

start() -> () =>
    ftest 1 2
    ftest 0 0
    gtest 5
    putLine
    htest
    ExitProcess 42
    :.
