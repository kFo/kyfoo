;; Syntax

; Expressions
primary-expr ::= id | integer | decimal | text

tuple-open ::= '(' *(expr, ',') ')'
tuple-open-left ::= '(' *(expr, ',') ']'
tuple-open-right ::= '[' *(expr, ',') ')'
tuple-closed ::= '[' *(expr, ',') ']'
tuple ::=  *(expr, ',')

apply-expr ::= +(tuple | symbol-expr | primary-expr)

symbol-expr ::= ?id '<' *(expr, ',') '>'

expr ::= apply-expr ?(':' expr)

scope ::= ind(>) *(expr, ind(=)) ind(<)
        | expr

; Declarations
import-decl ::= 'import' id

symbol ::= id *(expr, ',')

symbol-decl ::= symbol '=' expr
              | symbol '=' ind(>) +(expr, ind(=)) ind(<)

data-sum-decl ::= ':|' symbol
data-sum-ctor ::= symbol ?('(' *(id ':' expr, ',') ')')
data-sum-defn ::= ind(>) +(data-sum-ctor, ind(=)) ind(<)
data-sum ::= data-sum-decl ?(data-sum-defn)

data-prod-decl ::= ':&' symbol
data-prod-field ::= id ':' expr ?('=' expr)
data-prod-defn ::= ind(>) +(scope-data-prod, ind(=)) ind(<)
data-prod ::= data-prod-decl ?(data-prod-defn)

proc-decl ::= symbol '(' *(id ':' expr, ',') ')' ?(':' expr)
proc-defn ::= '=>' ind(>) +(scope-proc, ind(=)) ind(<)
            | '=>' expr
proc ::= proc-decl ?(proc-defn)

scope-decl ::= import-decl
             | proc
             | data-prod
             | data-sum
             | symbol-defn

scope-proc ::= scope-decl
             | expr

scope-data-prod ::= scope-decl
                  | data-prod-field

module ::= +(scope-decl, ind(=))

;; Semantics

Kyfoo is best understood as a statically typed "lisp", where in lisp the 
main syntactic construct is the list and its composition thereof. In
kyfoo the main syntactic construct is the tuple, where a tuple in kyfoo
is essentially what a list is in lisp, but with more varieties. Nevermind
if you are not familiar with lisp, as tuples will be clearly defined.

Primary expressions (/primary/) are sequences of program source that form 
the building blocks of a kyfoo program. They are the "atoms", if you will. 
Note that, except for the text expression, they do not contain spaces. In 
this regard they are similar to words of an english sentence, where words 
can be thought of as the "atoms" of a sentence. They come in the following 
varieties:

    /id/ is a name that either defines a declaration, identifies an existing
    declaration, is a keyword, or otherwise denotes an unbound 'free' 
    variable. Keywords are identifiers that serve as
    punctuation in the program grammar, contributing directly to semantics.
    Free variables identify place holders for patterns.
    
    /integer/ is a base 10 integer number.
    
    /decimal/ is a base 10 rational number that is not an integer.
    
    /text/ is a sequence of printable text that would otherwise be interpreted
    as part of the program source.

Tuple expressions (/tuple-expr/) are recursive sequences of either tuple 
expressions or primary expressions. They comes in the following varieties 
denoted by their punctuation:

    The absence of punctuation implies an /apply/ tuple.
    
    ( , ) is an /open/ tuple. They always flatten in their context.
    ( , ] is a /half-open-left/ tuple. TODO: semantics
    [ , ) is a /half-open-right/ tuple. TODO: semantics
    [ , ] is a /closed/ tuple. 
    
    indent(>) indent(=) indent(<) is an indent tuple (synonymous with scope). An
    indent is the number of spaces at the start of a source line. Every source 
    program starts with the notion of zero indent. indent(>) means the indent has 
    increased since the last line, indent(=) means the indent is the same as the 
    last line, and indent(<) means the indent has decreased. indent(<) must always 
    match a previously established indent, and there is an implicit indent(<)
    for every previous indent that is skipped. In this way, indent(>) always 
    conceptually matches with an indent(<).

Symbol expressions (/symbol-expr/) name a particular declaration. A symbol 
expression must always begin with an identifier, which always maps directly
to a symbol name. The remaining expressions are used as parameters for matching
against symbols.

Apply expressions (/apply-expr/) indicate either a procedure invocation or symbol
application. When the starting expression is a /primary-expr/ that names a symbol, 
the entire /apply-expr/ is interpreted as a /symbol-expression/. If the primary 
expression instead names a procedure, the apply expression is interpreted as an 
implicit procedure application. If instead the first expression is a symbol 
expression then it must identify a procedure declaration and the remaining 
expressions must match the procedure parameters. When the first expression does not
identify a symbol, the apply expression is flattened into its parent context. It is
an error to flatten into a context that is not another apply expression.

Expressions (/expr/) are apply-expressions with an optional constraint expression.
Constraints are expressions that describe, or "constrain", another expression when
they are interpreted during the semantics. Constraints essentially describe what a
program does, and thus form one of the central tenants of the kyfoo language. Much
more on constraints later in the semantics section.

Declarations
